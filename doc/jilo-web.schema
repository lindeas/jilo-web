CREATE TABLE users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username TEXT NOT NULL UNIQUE,
    password TEXT NOT NULL
);
CREATE TABLE users_meta (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    name TEXT,
    email TEXT,
    timezone TEXT,
    avatar TEXT,
    bio TEXT,
    FOREIGN KEY (user_id) REFERENCES users(id)
);
CREATE TABLE users_rights (
    user_id INTEGER,
    right_id INTEGER,
    PRIMARY KEY (user_id, right_id),
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (right_id) REFERENCES rights(id)
);
CREATE TABLE rights (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL UNIQUE
);
CREATE TABLE IF NOT EXISTS "jilo_agent_types" (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    description TEXT,
    endpoint TEXT
);
CREATE TABLE platforms (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL UNIQUE,
    jitsi_url TEXT NOT NULL,
    jilo_database TEXT NOT NULL
);
CREATE TABLE hosts (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    address TEXT NOT NULL,
    platform_id INTEGER NOT NULL,
    name TEXT,
    FOREIGN KEY(platform_id) REFERENCES platforms(id)
);
CREATE TABLE jilo_agents (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    host_id INTEGER NOT NULL,
    agent_type_id INTEGER NOT NULL,
    url TEXT NOT NULL,
    secret_key TEXT,
    check_period INTEGER DEFAULT 0,
    FOREIGN KEY(agent_type_id) REFERENCES jilo_agent_types(id),
    FOREIGN KEY(host_id) REFERENCES hosts(id)
);
CREATE TABLE jilo_agent_checks (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    agent_id INTEGER,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
    status_code INTEGER,
    response_time_ms INTEGER,
    response_content TEXT,
    FOREIGN KEY(agent_id) REFERENCES jilo_agents(id)
);
CREATE TABLE ip_whitelist (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    ip_address TEXT NOT NULL UNIQUE,
    is_network BOOLEAN DEFAULT 0 CHECK(is_network IN (0,1)),
    description TEXT,
    created_at TEXT DEFAULT (DATETIME('now')),
    created_by TEXT
);
CREATE TABLE ip_blacklist (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    ip_address TEXT NOT NULL UNIQUE,
    is_network BOOLEAN DEFAULT 0 CHECK(is_network IN (0,1)),
    reason TEXT,
    expiry_time TEXT NULL,
    created_at TEXT DEFAULT (DATETIME('now')),
    created_by TEXT
);
CREATE TABLE logs (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    time TEXT DEFAULT (DATETIME('now')),
    scope TEXT NOT NULL,
    message TEXT NOT NULL,
    FOREIGN KEY(user_id) REFERENCES users(id)
);
CREATE TABLE pages_rate_limits (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    ip_address TEXT NOT NULL,
    endpoint TEXT NOT NULL,
    request_time DATETIME DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE login_attempts (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    ip_address TEXT NOT NULL,
    username TEXT NOT NULL,
    attempted_at TEXT DEFAULT (DATETIME('now'))
);
CREATE TABLE user_2fa (
    user_id INTEGER NOT NULL PRIMARY KEY,
    secret_key TEXT NOT NULL,
    backup_codes TEXT,
    enabled INTEGER NOT NULL DEFAULT 0,
    created_at TEXT NOT NULL,
    last_used TEXT,
    FOREIGN KEY (user_id) REFERENCES users(id)
);
CREATE TABLE user_2fa_temp (
    user_id INTEGER NOT NULL PRIMARY KEY,
    code TEXT NOT NULL,
    created_at TEXT NOT NULL,
    expires_at TEXT NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(id)
);
CREATE TABLE user_password_reset (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    token TEXT NOT NULL UNIQUE,
    expires INTEGER NOT NULL,
    used INTEGER NOT NULL DEFAULT 0,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);
